# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# copy  to clipboard
function copy() {
 $@ | pbcopy
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
    python -c $'import SimpleHTTPServer, SocketServer, sys;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nclass NoCacheHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):\n\tdef do_GET(self, *args, **kwargs):\n\t\tself.headers["cache-control"] = "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";\n\t\tself.headers["pragma"] = "no-cache";\n\t\treturn SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self, *args, **kwargs);\nhttpd = SocketServer.TCPServer(("", int(sys.argv[1])), NoCacheHandler);\nhttpd.serve_forever();' "$port"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript
    else # pipe
        python -mjson.tool | pygmentize -l javascript
    fi
}

# All the dig info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer
}
